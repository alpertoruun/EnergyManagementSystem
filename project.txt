// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("EnergyManagementSystem")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+cf0f385afa863d3748d7433f5944f6d1e210f363")]
[assembly: System.Reflection.AssemblyProductAttribute("EnergyManagementSystem")]
[assembly: System.Reflection.AssemblyTitleAttribute("EnergyManagementSystem")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Generated by the MSBuild WriteCodeFragment class.

using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Interfaces.IService;
using EnergyManagementSystem.Data.Context;
using EnergyManagementSystem.Data.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<DatabaseContext>(options =>
{
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"),
        npgsqlOptionsAction: pgOptions =>
        {
            pgOptions.EnableRetryOnFailure(3);
            pgOptions.CommandTimeout(30);
        });
});

builder.Services.AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>)); //Repository pattern 
builder.Services.AddScoped<IPasswordHasher, PasswordHasher>();

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
}).AddJwtBearer(options =>
{
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = builder.Configuration["Jwt:ValidIssuer"],
        ValidAudience = builder.Configuration["Jwt:ValidAudience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Secret"]))
    };
});

builder.Services.AddAuthorization();

builder.Services.AddControllers(); // Eklendi

builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "Energy Management System API", Version = "v1" });

    var securitySchema = new OpenApiSecurityScheme
    {
        Description = "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.Http,
        Scheme = "bearer",
        Reference = new OpenApiReference
        {
            Type = ReferenceType.SecurityScheme,
            Id = "Bearer"
        }
    };

    c.AddSecurityDefinition("Bearer", securitySchema);

    var securityRequirement = new OpenApiSecurityRequirement
    {
        { securitySchema, new[] { "Bearer" } }
    };

    c.AddSecurityRequirement(securityRequirement);
});

var app = builder.Build();

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.UseSwagger();
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "Energy Management System API v1");
});

app.MapControllers();

app.Run();﻿namespace EnergyManagementSystem.Core
{
    public class Class1
    {

    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Configuration
{
    public class EmailSettings
    {
        public string Host { get; set; } = "smtp.gmail.com";
        public int Port { get; set; } = 587;
        public bool UseTls { get; set; } = true;
        public string Username { get; set; } = "alpertorun4455@gmail.com";
        public string Password { get; set; } = "weew audi svvu mbio";
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Configuration
{
    public class JwtSettings
    {
        public string ValidAudience { get; set; }
        public string ValidIssuer { get; set; }
        public string Secret { get; set; }
        public int TokenValidityInMinutes { get; set; }
        public int RefreshTokenValidityInDays { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Auth
{
    public class LoginDto
    {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Auth
{
    public class RegisterDto
    {
        [Required]
        public string Name { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [MinLength(6)]
        public string Password { get; set; }

        [Required]
        [Compare("Password")]
        public string ConfirmPassword { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Auth
{
    public class TokenDto
    {
        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }
        public DateTime Expiration { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace EnergyManagementSystem.Core.DTOs.Device
{
    public class CreateDeviceDto
    {
        public string Name { get; set; }

        public string Type { get; set; }  
        public int HouseId { get; set; }
        public int RoomId { get; set; }
        public bool PowerSavingMode { get; set; }
    }

}
﻿using EnergyManagementSystem.Core.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Device
{
    public class DeviceDto
    {
        public int DeviceId { get; set; }
        public string Name { get; set; }
        public bool Status { get; set; } 
        public string Type { get; set; } 
        public bool PowerSavingMode { get; set; }
        public decimal? EnergyLimit { get; set; }
        public string RoomName { get; set; }
        public string HouseName { get; set; }
    }
}
﻿using EnergyManagementSystem.Core.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Device
{
    public class UpdateDeviceDto
    {
        public int DeviceId { get; set; }
        public string Name { get; set; }
        public bool Status { get; set; } 
        public string Type { get; set; } 
        public bool PowerSavingMode { get; set; }
        public decimal? EnergyLimit { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.EnergyUsage
{
    public class CreateEnergyUsageDto
    {
        public int DeviceId { get; set; }
        public decimal Consumption { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.EnergyUsage
{
    public class EnergyUsageDto
    {
        public int UsageId { get; set; }
        public int DeviceId { get; set; }
        public DateTime Timestamp { get; set; }
        public decimal Consumption { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.House
{
    public class CreateHouseDto
    {
        public int UserId { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.House
{
    public class HouseDto
    {
        public int HouseId { get; set; }
        public int UserId { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public bool PowerSavingMode { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.House
{
    public class UpdateHouseDto
    {
        public int HouseId { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public bool PowerSavingMode { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Notification
{
    public class CreateNotificationDto
    {
        public int UserId { get; set; }
        public string Message { get; set; }
        public string Type { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Notification
{
    public class NotificationDto
    {
        public int NotificationId { get; set; }
        public int UserId { get; set; }
        public string Message { get; set; }
        public string Type { get; set; }
        public bool Status { get; set; }
        public DateTime CreatedAt { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Room
{
    public class CreateRoomDto
    {
        public int HouseId { get; set; }
        public string Name { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Room
{
    public class RoomDto
    {
        public int RoomId { get; set; }
        public int HouseId { get; set; }
        public string Name { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Room
{
    public class UpdateRoomDto
    {
        public int RoomId { get; set; }
        public string Name { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Schedule
{
    public class CreateScheduleDto
    {
        public int DeviceId { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Repeat { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Schedule
{
    public class ScheduleDto
    {
        public int ScheduleId { get; set; }
        public int DeviceId { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Repeat { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.Schedule
{
    public class UpdateScheduleDto
    {
        public int ScheduleId { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Repeat { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.User
{
    public class CreateUserDto
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.User
{
    public class UpdateUserDto
    {
        public int UserId { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.User
{
    public class UserDto
    {
        public int UserId { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.UserSetting
{
    public class CreateUserSettingDto
    {
        public int UserId { get; set; }
        public string Preference { get; set; }
        public string Value { get; set; }
    }

}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.UserSetting
{
    public class UpdateUserSettingDto
    {
        public int SettingId { get; set; }
        public string Preference { get; set; }
        public string Value { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.DTOs.UserSetting
{
    public class UserSettingDto
    {
        public int SettingId { get; set; }
        public int UserId { get; set; }
        public string Preference { get; set; }
        public string Value { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Enums
{
    public enum TokenType
    {
        EmailConfirmation,
        PasswordReset,
        RefreshToken
    }
}
﻿using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IDeviceRepository : IGenericRepository<Device>
    {
        Task<IEnumerable<Device>> GetDevicesByHouseIdAsync(int houseId);
        Task<IEnumerable<Device>> GetDevicesByRoomIdAsync(int roomId);
        Task<Device> GetDeviceWithDetailsAsync(int deviceId);
    }

}
﻿using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IEnergyUsageRepository : IGenericRepository<EnergyUsage>
    {
        Task<IEnumerable<EnergyUsage>> GetUsageByDeviceIdAsync(int deviceId, DateTime startDate, DateTime endDate);
        Task<decimal> GetTotalConsumptionAsync(int deviceId, DateTime startDate, DateTime endDate);
        Task<bool> RemoveAsync(int id);
    }
}
﻿using System.Linq.Expressions;


namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IGenericRepository<T> where T : class
    {
        // Temel CRUD operasyonları
        Task<T> GetByIdAsync(int id);
        Task<IEnumerable<T>> GetAllAsync();
        Task<T> AddAsync(T entity);
        Task UpdateAsync(T entity);
        Task DeleteAsync(T entity);

        // Filtreleme için
        Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate);

        // Tek kayıt getirme
        Task<T> SingleOrDefaultAsync(Expression<Func<T, bool>> predicate);
    }
}﻿using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IHouseRepository : IGenericRepository<House>
    {
        Task<IEnumerable<House>> GetHousesByUserIdAsync(int userId);
        Task<House> GetHouseWithDetailsAsync(int houseId);
    }
}
﻿using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface INotificationRepository : IGenericRepository<Notification>
    {
        Task<IEnumerable<Notification>> GetUnreadNotificationsAsync(int userId);
        Task<int> GetUnreadNotificationCountAsync(int userId);
    }
}
﻿using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IRoomRepository : IGenericRepository<Room>
    {
        Task<IEnumerable<Room>> GetRoomsByHouseIdAsync(int houseId);
        Task<Room> GetRoomWithDevicesAsync(int roomId);
    }
}
﻿using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IScheduleRepository : IGenericRepository<Schedule>
    {
        Task<IEnumerable<Schedule>> GetSchedulesByDeviceIdAsync(int deviceId);
        Task<IEnumerable<Schedule>> GetActiveSchedulesAsync();
    }
}
﻿using EnergyManagementSystem.Core.DTOs.Auth;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces.IService
{
    public interface IAuthService
    {
        Task<TokenDto> LoginAsync(LoginDto loginDto);
        Task<TokenDto> RegisterAsync(RegisterDto registerDto);
        Task<TokenDto> RefreshTokenAsync(string refreshToken);
        Task<bool> ForgotPasswordAsync(string email);
        Task<bool> ResetPasswordAsync(string email, string token, string newPassword);
        Task<bool> ChangePasswordAsync(int userId, string currentPassword, string newPassword);
        Task<bool> RevokeRefreshTokenAsync(string refreshToken);
    }
}
using EnergyManagementSystem.Core.DTOs;
using EnergyManagementSystem.Core.DTOs.Device;
using System.Threading.Tasks;
namespace EnergyManagementSystem.Core.Interfaces.IService
{
    public interface IDeviceService
    {
        Task<DeviceDto> GetByIdAsync(int deviceId);
        Task<IEnumerable<DeviceDto>> GetHouseDevicesAsync(int houseId);
        Task<DeviceDto> CreateAsync(int houseId, CreateDeviceDto createDeviceDTO);
        Task UpdateAsync(int deviceId, UpdateDeviceDto updateDeviceDTO);
        Task DeleteAsync(int deviceId);
        Task<IEnumerable<DeviceDto>> GetDevicesByRoomAsync(int roomId);
        Task UpdateDeviceStatusAsync(int deviceId, bool status);
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces.IService
{
    public interface IEmailService
    {
        Task SendEmailAsync(string to, string subject, string body);
        Task SendPasswordResetEmailAsync(string to, string resetToken);
        Task SendEmailConfirmationAsync(string to, string confirmationToken);
    }
}
using EnergyManagementSystem.Core.DTOs.EnergyUsage;
using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IEnergyUsageService
    {
        Task<EnergyUsageDto> GetByIdAsync(int id);
        Task<IEnumerable<EnergyUsageDto>> GetAllAsync();
        Task<EnergyUsageDto> AddAsync(CreateEnergyUsageDto dto);
        Task<bool> RemoveAsync(int id);
        Task<bool> UpdateAsync(int id, CreateEnergyUsageDto dto);

        Task<EnergyUsageDto> GetCurrentUsageAsync(int deviceId);
        Task<IEnumerable<EnergyUsageDto>> GetUsageHistoryAsync(int deviceId, DateTime startDate, DateTime endDate);
    }
}
using EnergyManagementSystem.Core.DTOs.House;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IHouseService 
    { Task<HouseDto> GetByIdAsync(int houseId);
        Task<IEnumerable<HouseDto>> GetUserHousesAsync(int userId);
        Task<HouseDto> CreateAsync(int userId, CreateHouseDto createHouseDTO);
        Task UpdateAsync(int houseId, UpdateHouseDto updateHouseDTO);
        Task DeleteAsync(int houseId);
        Task TogglePowerSavingModeAsync(int houseId, bool enabled);
        
    }
}
using EnergyManagementSystem.Core.DTOs.Notification;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface INotificationService 
    { Task<NotificationDto> GetByIdAsync(int notificationId);
        Task<IEnumerable<NotificationDto>> GetUserNotificationsAsync(int userId);
        Task CreateAsync(CreateNotificationDto createNotificationDTO);
        Task MarkAsReadAsync(int notificationId);
        Task DeleteAsync(int notificationId);
        Task<int> GetUnreadCountAsync(int userId);
        
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces.IService
{
    public interface IPasswordHasher
    {
        string HashPassword(string password);
        bool VerifyPassword(string password, string hashedPassword);
    }
}
﻿using EnergyManagementSystem.Core.DTOs.Room;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IRoomService
    {
        Task<RoomDto> GetByIdAsync(int roomId);
        Task<IEnumerable<RoomDto>> GetHouseRoomsAsync(int houseId);
        Task<RoomDto> CreateAsync(CreateRoomDto createRoomDto);
        Task UpdateAsync(int roomId, UpdateRoomDto updateRoomDto);
        Task DeleteAsync(int roomId);
        Task<RoomDto> GetRoomWithDevicesAsync(int roomId);
    }
}using EnergyManagementSystem.Core.DTOs.Schedule;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IScheduleService 
    { Task<ScheduleDto> GetByIdAsync(int scheduleId);
        Task<IEnumerable<ScheduleDto>> GetDeviceSchedulesAsync(int deviceId);
        Task<ScheduleDto> CreateAsync(CreateScheduleDto createScheduleDTO);
        Task UpdateAsync(int scheduleId, UpdateScheduleDto updateScheduleDTO);
        Task DeleteAsync(int scheduleId);
        Task<IEnumerable<ScheduleDto>> GetActiveSchedulesAsync(int deviceId);
        
    }
}
using EnergyManagementSystem.Core.DTOs.User;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IUserService 
    { Task<UserDto> GetByIdAsync(int userId);
        Task<UserDto> GetByEmailAsync(string email);
        Task<UserDto> CreateAsync(CreateUserDto createUserDTO);
        Task UpdateAsync(int userId, UpdateUserDto updateUserDTO);
        Task DeleteAsync(int userId);
        Task<bool> ValidateCredentialsAsync(string email, string password);
        Task ChangePasswordAsync(int userId, string currentPassword, string newPassword);
        
    }
}
using EnergyManagementSystem.Core.DTOs.UserSetting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IUserSettingsService 
    { Task<UserSettingDto> GetAllSettingsAsync(int userId);
        Task<string> GetPreferenceAsync(int userId, string key);
        Task UpdateSettingAsync(int userId, string key, string value);
        Task UpdateSettingsAsync(int userId, UpdateUserSettingDto settings);
        
    }
}
﻿using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IUserRepository : IGenericRepository<User>
    {
        Task<User> GetUserByEmailAsync(string email);
        Task<User> GetUserWithDetailsAsync(int userId);
    }
}
﻿using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IUserSettingRepository : IGenericRepository<UserSetting>
    {
        Task<IEnumerable<UserSetting>> GetSettingsByUserIdAsync(int userId);
        Task<UserSetting> GetSettingByPreferenceAsync(int userId, string preference);
    }
}
﻿using EnergyManagementSystem.Core.Enums;
using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Interfaces
{
    public interface IUserTokenRepository : IGenericRepository<UserToken>
    {
        Task<UserToken> GetValidTokenAsync(int userId, string token, TokenType tokenType);
        Task<bool> InvalidateTokensAsync(int userId, TokenType tokenType);
    }
}
﻿using System.Collections.Generic;

namespace EnergyManagementSystem.Core.Models
{
    public class Device
    {
        public int DeviceId { get; set; }
        public int HouseId { get; set; }
        public int RoomId { get; set; }  
        public string Name { get; set; }
        public string Type { get; set; }
        public bool Status { get; set; }
        public bool PowerSavingMode { get; set; }
        public decimal? EnergyLimit { get; set; }  // Opsiyonel
        public DateTime CreatedAt { get; set; }

        // Navigation properties
        public House House { get; set; }
        public Room Room { get; set; }
        public ICollection<EnergyUsage> EnergyUsages { get; set; }
        public ICollection<Schedule> Schedules { get; set; }
        public ICollection<Limit> Limits { get; set; }
    }
}
﻿using System.ComponentModel.DataAnnotations;

namespace EnergyManagementSystem.Core.Models
{
    public class EnergyUsage
    {
        [Key]
        public int UsageId { get; set; }
        public int DeviceId { get; set; }
        public DateTime Timestamp { get; set; }
        public decimal Consumption { get; set; }

        // Navigation property
        public Device Device { get; set; }
    }
}
﻿namespace EnergyManagementSystem.Core.Models
{
    public class House
    {
        public int HouseId { get; set; }
        public int UserId { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public bool PowerSavingMode { get; set; }
        public DateTime CreatedAt { get; set; }

        public User User { get; set; }
        public ICollection<Room> Rooms { get; set; }
        public ICollection<Device> Devices { get; set; }
    }
}
﻿namespace EnergyManagementSystem.Core.Models
{
    public class Limit
    {
        public int LimitId { get; set; }
        public int DeviceId { get; set; }
        public string LimitType { get; set; }  // "kwh" or "tl"
        public decimal LimitValue { get; set; }
        public string Period { get; set; }  // "daily", "monthly" etc.

        // Navigation property
        public Device Device { get; set; }
    }
}
﻿namespace EnergyManagementSystem.Core.Models
{
    public class Notification
    {
        public int NotificationId { get; set; }
        public int UserId { get; set; }
        public string Message { get; set; }
        public string Type { get; set; }  // "Warning", "Info" etc.
        public bool Status { get; set; }  // true = okundu, false = okunmadı
        public DateTime CreatedAt { get; set; }

        // Navigation property
        public User User { get; set; }
    }
}
﻿namespace EnergyManagementSystem.Core.Models
{
    public class Room
    {
        public int RoomId { get; set; }
        public int HouseId { get; set; }
        public string Name { get; set; }

        // Navigation properties
        public House House { get; set; }
        public ICollection<Device> Devices { get; set; }
    }
}
﻿namespace EnergyManagementSystem.Core.Models
{
    public class Schedule
    {
        public int ScheduleId { get; set; }
        public int DeviceId { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Repeat { get; set; }  // "daily", "weekly" etc.

        // Navigation property
        public Device Device { get; set; }
    }
}
﻿namespace EnergyManagementSystem.Core.Models
{
    public class User
    {
        public int UserId { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public bool IsEmailConfirmed { get; set; }  // an Extra for mail confirmed
        public DateTime CreatedAt { get; set; }

        // Navigation properties
        public ICollection<House> Houses { get; set; }
        public ICollection<Notification> Notifications { get; set; }
        public ICollection<UserSetting> UserSettings { get; set; }
        public ICollection<UserToken> UserTokens { get; set; }
    }
}
﻿using System.ComponentModel.DataAnnotations;

namespace EnergyManagementSystem.Core.Models
{
    public class UserSetting
    {
        [Key]
        public int SettingId { get; set; }
        public int UserId { get; set; }
        public string Preference { get; set; }  // "theme", "power_saving_mode" etc.
        public string Value { get; set; }

        // Navigation property
        public User User { get; set; }
    }
}
﻿using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EnergyManagementSystem.Core.Enums;

namespace EnergyManagementSystem.Core.Models
{
    public class UserToken
    {
        [Key]
        public int TokenId { get; set; }
        public int UserId { get; set; }
        public string Token { get; set; }
        public TokenType TokenType { get; set; } // For EMAIL_CONFIRMATION, PASSWORD_RESET, etc.
        public DateTime ExpiryDate { get; set; }
        public bool IsUsed { get; set; }
        public DateTime CreatedAt { get; set; }

        // Navigation property
        public User User { get; set; }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("EnergyManagementSystem.Core")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+cf0f385afa863d3748d7433f5944f6d1e210f363")]
[assembly: System.Reflection.AssemblyProductAttribute("EnergyManagementSystem.Core")]
[assembly: System.Reflection.AssemblyTitleAttribute("EnergyManagementSystem.Core")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
﻿namespace EnergyManagementSystem.Data
{
    public class Class1
    {

    }
}
﻿using EnergyManagementSystem.Core.Models;
using Microsoft.EntityFrameworkCore;

namespace EnergyManagementSystem.Data.Context
{
    public class DatabaseContext : DbContext
    {
        public DatabaseContext(DbContextOptions<DatabaseContext> options) : base(options)
        {
        }

        public DbSet<User> Users { get; set; }
        public DbSet<House> Houses { get; set; }
        public DbSet<Room> Rooms { get; set; }
        public DbSet<Device> Devices { get; set; }
        public DbSet<EnergyUsage> EnergyUsages { get; set; }
        public DbSet<Schedule> Schedules { get; set; }
        public DbSet<Notification> Notifications { get; set; }
        public DbSet<Limit> Limits { get; set; }
        public DbSet<UserSetting> UserSettings { get; set; }
        public DbSet<UserToken> UserTokens { get; set; }

    }
}﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;

namespace EnergyManagementSystem.Data.Context
{
    public class DatabaseContextFactory : IDesignTimeDbContextFactory<DatabaseContext>
    {
        public DatabaseContext CreateDbContext(string[] args)
        {
            var optionsBuilder = new DbContextOptionsBuilder<DatabaseContext>();
            optionsBuilder.UseNpgsql("Host=localhost;Database=ems;Username=postgres;Password=123");

            return new DatabaseContext(optionsBuilder.Options);
        }
    }
}﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnergyManagementSystem.Data.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    UserId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    Name = table.Column<string>(type: "text", nullable: false),
                    Email = table.Column<string>(type: "text", nullable: false),
                    Password = table.Column<string>(type: "text", nullable: false),
                    IsEmailConfirmed = table.Column<bool>(type: "boolean", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.UserId);
                });

            migrationBuilder.CreateTable(
                name: "Houses",
                columns: table => new
                {
                    HouseId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    Name = table.Column<string>(type: "text", nullable: false),
                    Address = table.Column<string>(type: "text", nullable: false),
                    PowerSavingMode = table.Column<bool>(type: "boolean", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Houses", x => x.HouseId);
                    table.ForeignKey(
                        name: "FK_Houses_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Notifications",
                columns: table => new
                {
                    NotificationId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    Message = table.Column<string>(type: "text", nullable: false),
                    Type = table.Column<string>(type: "text", nullable: false),
                    Status = table.Column<bool>(type: "boolean", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notifications", x => x.NotificationId);
                    table.ForeignKey(
                        name: "FK_Notifications_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserSettings",
                columns: table => new
                {
                    SettingId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    Preference = table.Column<string>(type: "text", nullable: false),
                    Value = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserSettings", x => x.SettingId);
                    table.ForeignKey(
                        name: "FK_UserSettings_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserTokens",
                columns: table => new
                {
                    TokenId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    UserId = table.Column<int>(type: "integer", nullable: false),
                    Token = table.Column<string>(type: "text", nullable: false),
                    TokenType = table.Column<int>(type: "integer", nullable: false),
                    ExpiryDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    IsUsed = table.Column<bool>(type: "boolean", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserTokens", x => x.TokenId);
                    table.ForeignKey(
                        name: "FK_UserTokens_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Rooms",
                columns: table => new
                {
                    RoomId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    HouseId = table.Column<int>(type: "integer", nullable: false),
                    Name = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Rooms", x => x.RoomId);
                    table.ForeignKey(
                        name: "FK_Rooms_Houses_HouseId",
                        column: x => x.HouseId,
                        principalTable: "Houses",
                        principalColumn: "HouseId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Devices",
                columns: table => new
                {
                    DeviceId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    HouseId = table.Column<int>(type: "integer", nullable: false),
                    RoomId = table.Column<int>(type: "integer", nullable: false),
                    Name = table.Column<string>(type: "text", nullable: false),
                    Type = table.Column<string>(type: "text", nullable: false),
                    Status = table.Column<bool>(type: "boolean", nullable: false),
                    PowerSavingMode = table.Column<bool>(type: "boolean", nullable: false),
                    EnergyLimit = table.Column<decimal>(type: "numeric", nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Devices", x => x.DeviceId);
                    table.ForeignKey(
                        name: "FK_Devices_Houses_HouseId",
                        column: x => x.HouseId,
                        principalTable: "Houses",
                        principalColumn: "HouseId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Devices_Rooms_RoomId",
                        column: x => x.RoomId,
                        principalTable: "Rooms",
                        principalColumn: "RoomId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "EnergyUsages",
                columns: table => new
                {
                    UsageId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DeviceId = table.Column<int>(type: "integer", nullable: false),
                    Timestamp = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Consumption = table.Column<decimal>(type: "numeric", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_EnergyUsages", x => x.UsageId);
                    table.ForeignKey(
                        name: "FK_EnergyUsages_Devices_DeviceId",
                        column: x => x.DeviceId,
                        principalTable: "Devices",
                        principalColumn: "DeviceId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Limits",
                columns: table => new
                {
                    LimitId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DeviceId = table.Column<int>(type: "integer", nullable: false),
                    LimitType = table.Column<string>(type: "text", nullable: false),
                    LimitValue = table.Column<decimal>(type: "numeric", nullable: false),
                    Period = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Limits", x => x.LimitId);
                    table.ForeignKey(
                        name: "FK_Limits_Devices_DeviceId",
                        column: x => x.DeviceId,
                        principalTable: "Devices",
                        principalColumn: "DeviceId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Schedules",
                columns: table => new
                {
                    ScheduleId = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    DeviceId = table.Column<int>(type: "integer", nullable: false),
                    StartTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    EndTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Repeat = table.Column<string>(type: "text", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Schedules", x => x.ScheduleId);
                    table.ForeignKey(
                        name: "FK_Schedules_Devices_DeviceId",
                        column: x => x.DeviceId,
                        principalTable: "Devices",
                        principalColumn: "DeviceId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Devices_HouseId",
                table: "Devices",
                column: "HouseId");

            migrationBuilder.CreateIndex(
                name: "IX_Devices_RoomId",
                table: "Devices",
                column: "RoomId");

            migrationBuilder.CreateIndex(
                name: "IX_EnergyUsages_DeviceId",
                table: "EnergyUsages",
                column: "DeviceId");

            migrationBuilder.CreateIndex(
                name: "IX_Houses_UserId",
                table: "Houses",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Limits_DeviceId",
                table: "Limits",
                column: "DeviceId");

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_UserId",
                table: "Notifications",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Rooms_HouseId",
                table: "Rooms",
                column: "HouseId");

            migrationBuilder.CreateIndex(
                name: "IX_Schedules_DeviceId",
                table: "Schedules",
                column: "DeviceId");

            migrationBuilder.CreateIndex(
                name: "IX_UserSettings_UserId",
                table: "UserSettings",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_UserTokens_UserId",
                table: "UserTokens",
                column: "UserId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "EnergyUsages");

            migrationBuilder.DropTable(
                name: "Limits");

            migrationBuilder.DropTable(
                name: "Notifications");

            migrationBuilder.DropTable(
                name: "Schedules");

            migrationBuilder.DropTable(
                name: "UserSettings");

            migrationBuilder.DropTable(
                name: "UserTokens");

            migrationBuilder.DropTable(
                name: "Devices");

            migrationBuilder.DropTable(
                name: "Rooms");

            migrationBuilder.DropTable(
                name: "Houses");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}
﻿// <auto-generated />
using System;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnergyManagementSystem.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241205110449_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeviceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EnergyLimit")
                        .HasColumnType("numeric");

                    b.Property<int>("HouseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PowerSavingMode")
                        .HasColumnType("boolean");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DeviceId");

                    b.HasIndex("HouseId");

                    b.HasIndex("RoomId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.EnergyUsage", b =>
                {
                    b.Property<int>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsageId"));

                    b.Property<decimal>("Consumption")
                        .HasColumnType("numeric");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UsageId");

                    b.HasIndex("DeviceId");

                    b.ToTable("EnergyUsages");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HouseId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PowerSavingMode")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("HouseId");

                    b.HasIndex("UserId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Limit", b =>
                {
                    b.Property<int>("LimitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LimitId"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("LimitType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("LimitValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LimitId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Limits");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoomId"));

                    b.Property<int>("HouseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoomId");

                    b.HasIndex("HouseId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Repeat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ScheduleId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.UserSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Preference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SettingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.UserToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Device", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.House", "House")
                        .WithMany("Devices")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyManagementSystem.Core.Models.Room", "Room")
                        .WithMany("Devices")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.EnergyUsage", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.Device", "Device")
                        .WithMany("EnergyUsages")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.House", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.User", "User")
                        .WithMany("Houses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Limit", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.Device", "Device")
                        .WithMany("Limits")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Notification", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Room", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.House", "House")
                        .WithMany("Rooms")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Schedule", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.Device", "Device")
                        .WithMany("Schedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.UserSetting", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.UserToken", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Device", b =>
                {
                    b.Navigation("EnergyUsages");

                    b.Navigation("Limits");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.House", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Room", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.User", b =>
                {
                    b.Navigation("Houses");

                    b.Navigation("Notifications");

                    b.Navigation("UserSettings");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
﻿// <auto-generated />
using System;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnergyManagementSystem.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeviceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("EnergyLimit")
                        .HasColumnType("numeric");

                    b.Property<int>("HouseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PowerSavingMode")
                        .HasColumnType("boolean");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DeviceId");

                    b.HasIndex("HouseId");

                    b.HasIndex("RoomId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.EnergyUsage", b =>
                {
                    b.Property<int>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsageId"));

                    b.Property<decimal>("Consumption")
                        .HasColumnType("numeric");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UsageId");

                    b.HasIndex("DeviceId");

                    b.ToTable("EnergyUsages");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HouseId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PowerSavingMode")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("HouseId");

                    b.HasIndex("UserId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Limit", b =>
                {
                    b.Property<int>("LimitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LimitId"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("LimitType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("LimitValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LimitId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Limits");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoomId"));

                    b.Property<int>("HouseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoomId");

                    b.HasIndex("HouseId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduleId"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Repeat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ScheduleId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.UserSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Preference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SettingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.UserToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TokenType")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Device", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.House", "House")
                        .WithMany("Devices")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnergyManagementSystem.Core.Models.Room", "Room")
                        .WithMany("Devices")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.EnergyUsage", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.Device", "Device")
                        .WithMany("EnergyUsages")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.House", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.User", "User")
                        .WithMany("Houses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Limit", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.Device", "Device")
                        .WithMany("Limits")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Notification", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Room", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.House", "House")
                        .WithMany("Rooms")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Schedule", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.Device", "Device")
                        .WithMany("Schedules")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.UserSetting", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.UserToken", b =>
                {
                    b.HasOne("EnergyManagementSystem.Core.Models.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Device", b =>
                {
                    b.Navigation("EnergyUsages");

                    b.Navigation("Limits");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.House", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.Room", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("EnergyManagementSystem.Core.Models.User", b =>
                {
                    b.Navigation("Houses");

                    b.Navigation("Notifications");

                    b.Navigation("UserSettings");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("EnergyManagementSystem.Data")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+cf0f385afa863d3748d7433f5944f6d1e210f363")]
[assembly: System.Reflection.AssemblyProductAttribute("EnergyManagementSystem.Data")]
[assembly: System.Reflection.AssemblyTitleAttribute("EnergyManagementSystem.Data")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
﻿using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;


namespace EnergyManagementSystem.Data.Repositories
{
    public class DeviceRepository : GenericRepository<Device>, IDeviceRepository
    {
        private readonly DatabaseContext _context;

        public DeviceRepository(DatabaseContext context) : base(context)
        {
            _context = context;
        }

        public async Task<IEnumerable<Device>> GetDevicesByHouseIdAsync(int houseId)
        {
            return await _context.Devices
                .Where(d => d.HouseId == houseId)
                .Include(d => d.Room)
                .ToListAsync();
        }

        public async Task<IEnumerable<Device>> GetDevicesByRoomIdAsync(int roomId)
        {
            return await _context.Devices
                .Where(d => d.RoomId == roomId)
                .Include(d => d.Room)
                .Include(d => d.EnergyUsages)
                .ToListAsync();
        }

        public async Task<Device> GetDeviceWithDetailsAsync(int deviceId)
        {
            return await _context.Devices
                .Include(d => d.Room)
                .Include(d => d.House)
                .Include(d => d.EnergyUsages)
                .Include(d => d.Schedules)
                .Include(d => d.Limits)
                .FirstOrDefaultAsync(d => d.DeviceId == deviceId);
        }
    }
}
﻿using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;


namespace EnergyManagementSystem.Data.Repositories
{
    public class EnergyUsageRepository : GenericRepository<EnergyUsage>, IEnergyUsageRepository
    {
        private readonly DatabaseContext _context;

        public EnergyUsageRepository(DatabaseContext context) : base(context)
        {
            _context = context;
        }

        public async Task<IEnumerable<EnergyUsage>> GetUsageByDeviceIdAsync(int deviceId, DateTime startDate, DateTime endDate)
        {
            return await _context.EnergyUsages
                .Where(e => e.DeviceId == deviceId
                        && e.Timestamp >= startDate
                        && e.Timestamp <= endDate)
                .Include(e => e.Device)
                .OrderByDescending(e => e.Timestamp)
                .ToListAsync();
        }

        public async Task<decimal> GetTotalConsumptionAsync(int deviceId, DateTime startDate, DateTime endDate)
        {
            return await _context.EnergyUsages
                .Where(e => e.DeviceId == deviceId
                        && e.Timestamp >= startDate
                        && e.Timestamp <= endDate)
                .SumAsync(e => e.Consumption);
        }

        public async Task<bool> RemoveAsync(int id)
        {
            var entity = await _context.EnergyUsages.FindAsync(id);
            if (entity == null)
                return false;

            _context.EnergyUsages.Remove(entity);
            await _context.SaveChangesAsync();
            return true;
        }
    }
}
﻿using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using System.Linq.Expressions;

namespace EnergyManagementSystem.Data.Repositories
{
    public class GenericRepository<T> : IGenericRepository<T> where T : class //DIP 
    {
        protected readonly DatabaseContext _context;
        private readonly DbSet<T> _dbSet;

        public GenericRepository(DatabaseContext context)
        {
            _context = context;
            _dbSet = context.Set<T>();
        }

        public async Task<T> GetByIdAsync(int id)
        {
            return await _dbSet.FindAsync(id);
        }

        public async Task<IEnumerable<T>> GetAllAsync()
        {
            return await _dbSet.ToListAsync();
        }

        public async Task<T> AddAsync(T entity)
        {
            await _dbSet.AddAsync(entity);
            await _context.SaveChangesAsync();
            return entity;
        }

        public async Task UpdateAsync(T entity)
        {
            _dbSet.Update(entity);
            await _context.SaveChangesAsync();
        }

        public async Task DeleteAsync(T entity)
        {
            _dbSet.Remove(entity);
            await _context.SaveChangesAsync();
        }

        public async Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate)
        {
            return await _dbSet.Where(predicate).ToListAsync();
        }

        public async Task<T> SingleOrDefaultAsync(Expression<Func<T, bool>> predicate)
        {
            return await _dbSet.SingleOrDefaultAsync(predicate);
        }
    }
}﻿using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Data.Repositories
{
    public class HouseRepository : GenericRepository<House>, IHouseRepository
    {
        private readonly DatabaseContext _context;

        public HouseRepository(DatabaseContext context) : base(context)
        {
            _context = context;
        }

        public async Task<IEnumerable<House>> GetHousesByUserIdAsync(int userId)
        {
            return await _context.Houses
                .Where(h => h.UserId == userId)
                .Include(h => h.Rooms)
                .ToListAsync();
        }

        public async Task<House> GetHouseWithDetailsAsync(int houseId)
        {
            return await _context.Houses
                .Include(h => h.Rooms)
                    .ThenInclude(r => r.Devices)
                .Include(h => h.Devices)
                .FirstOrDefaultAsync(h => h.HouseId == houseId);
        }
    }
}
﻿using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Data.Repositories
{
    public class NotificationRepository : GenericRepository<Notification>, INotificationRepository
    {
        private readonly DatabaseContext _context;

        public NotificationRepository(DatabaseContext context) : base(context)
        {
            _context = context;
        }

        public async Task<IEnumerable<Notification>> GetUnreadNotificationsAsync(int userId)
        {
            return await _context.Notifications
                .Where(n => n.UserId == userId && !n.Status)
                .OrderByDescending(n => n.CreatedAt)
                .ToListAsync();
        }

        public async Task<IEnumerable<Notification>> GetReadNotificationsAsync(int userId)
        {
            return await _context.Notifications
                .Where(n => n.UserId == userId && n.Status)
                .OrderByDescending(n => n.CreatedAt)
                .ToListAsync();
        }

        public async Task<int> GetUnreadNotificationCountAsync(int userId)
        {
            return await _context.Notifications
                .CountAsync(n => n.UserId == userId && !n.Status);
        }

        public async Task MarkAsReadAsync(int notificationId)
        {
            var notification = await _context.Notifications.FindAsync(notificationId);
            if (notification != null)
            {
                notification.Status = true;
                await _context.SaveChangesAsync();
            }
        }
    }
}
﻿using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq;


namespace EnergyManagementSystem.Data.Repositories
{
    public class RoomRepository : GenericRepository<Room>, IRoomRepository
    {
        private readonly DatabaseContext _context;

        public RoomRepository(DatabaseContext context) : base(context)
        {
            _context = context;
        }

        public async Task<IEnumerable<Room>> GetRoomsByHouseIdAsync(int houseId)
        {
            return await _context.Rooms
                .Where(r => r.HouseId == houseId)
                .Include(r => r.Devices)
                .ToListAsync();
        }

        public async Task<Room> GetRoomWithDevicesAsync(int roomId)
        {
            return await _context.Rooms
                .Include(r => r.Devices)
                    .ThenInclude(d => d.EnergyUsages)
                .Include(r => r.House)
                .FirstOrDefaultAsync(r => r.RoomId == roomId);
        }
    }
}
﻿using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Data.Repositories
{
    public class ScheduleRepository : GenericRepository<Schedule>, IScheduleRepository
    {
        private readonly DatabaseContext _context;

        public ScheduleRepository(DatabaseContext context) : base(context)
        {
            _context = context;
        }

        public async Task<IEnumerable<Schedule>> GetSchedulesByDeviceIdAsync(int deviceId)
        {
            return await _context.Schedules
                .Where(s => s.DeviceId == deviceId)
                .Include(s => s.Device)
                .OrderBy(s => s.StartTime)
                .ToListAsync();
        }

        public async Task<IEnumerable<Schedule>> GetActiveSchedulesAsync()
        {
            var currentTime = DateTime.Now;
            return await _context.Schedules
                .Where(s => s.StartTime <= currentTime && s.EndTime >= currentTime)
                .Include(s => s.Device)
                .ToListAsync();
        }
    }
}
﻿using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Data.Repositories
{
    public class UserRepository : GenericRepository<User>, IUserRepository
    {
        private readonly DatabaseContext _context;

        public UserRepository(DatabaseContext context) : base(context)
        {
            _context = context;
        }

        public async Task<User> GetUserByEmailAsync(string email)
        {
            return await _context.Users
                .FirstOrDefaultAsync(u => u.Email == email);
        }

        public async Task<User> GetUserWithDetailsAsync(int userId)
        {
            return await _context.Users
                .Include(u => u.Houses)
                    .ThenInclude(h => h.Rooms)
                .Include(u => u.Notifications)
                .Include(u => u.UserSettings)
                .FirstOrDefaultAsync(u => u.UserId == userId);
        }
    }

}
﻿using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Data.Repositories
{
    public class UserSettingRepository : GenericRepository<UserSetting>, IUserSettingRepository
    {
        private readonly DatabaseContext _context;

        public UserSettingRepository(DatabaseContext context) : base(context)
        {
            _context = context;
        }

        public async Task<IEnumerable<UserSetting>> GetSettingsByUserIdAsync(int userId)
        {
            return await _context.UserSettings
                .Where(us => us.UserId == userId)
                .ToListAsync();
        }

        public async Task<UserSetting> GetSettingByPreferenceAsync(int userId, string preference)
        {
            return await _context.UserSettings
                .FirstOrDefaultAsync(us => us.UserId == userId && us.Preference == preference);
        }
    }
}
﻿using EnergyManagementSystem.Core.Enums;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using EnergyManagementSystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Data.Repositories
{
    public class UserTokenRepository : GenericRepository<UserToken>, IUserTokenRepository
    {
        private readonly DatabaseContext _context;

        public UserTokenRepository(DatabaseContext context) : base(context)
        {
            _context = context;
        }

        public async Task<UserToken> GetValidTokenAsync(int userId, string token, TokenType tokenType)
        {
            return await _context.UserTokens
                .FirstOrDefaultAsync(t =>
                    t.UserId == userId &&
                    t.Token == token &&
                    t.TokenType == tokenType &&
                    t.ExpiryDate > DateTime.UtcNow &&
                    !t.IsUsed);
        }

        public async Task<bool> InvalidateTokensAsync(int userId, TokenType tokenType)
        {
            var tokens = await _context.UserTokens
                .Where(t => t.UserId == userId &&
                       t.TokenType == tokenType &&
                       !t.IsUsed)
                .ToListAsync();

            foreach (var token in tokens)
            {
                token.IsUsed = true;
            }

            await _context.SaveChangesAsync();
            return true;
        }
    }
}
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("EnergyManagementSystem.Service")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+cf0f385afa863d3748d7433f5944f6d1e210f363")]
[assembly: System.Reflection.AssemblyProductAttribute("EnergyManagementSystem.Service")]
[assembly: System.Reflection.AssemblyTitleAttribute("EnergyManagementSystem.Service")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
﻿using EnergyManagementSystem.Core.DTOs.Auth;
using EnergyManagementSystem.Core.Configuration;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using EnergyManagementSystem.Core.Enums;
using EnergyManagementSystem.Core.Interfaces.IService;
using System.Security.Cryptography;

namespace EnergyManagementSystem.Core.Services
{
    public class AuthService : IAuthService
    {
        private readonly IUserRepository _userRepository;
        private readonly IUserTokenRepository _userTokenRepository;
        private readonly IPasswordHasher _passwordHasher;
        private readonly IEmailService _emailService;
        private readonly JwtSettings _jwtSettings;

        public AuthService(
            IUserRepository userRepository,
            IUserTokenRepository userTokenRepository,
            IPasswordHasher passwordHasher,
            IEmailService emailService,
            IOptions<JwtSettings> jwtSettings)
        {
            _userRepository = userRepository;
            _userTokenRepository = userTokenRepository;
            _passwordHasher = passwordHasher;
            _emailService = emailService;
            _jwtSettings = jwtSettings.Value;
        }

        public async Task<TokenDto> LoginAsync(LoginDto loginDto)
        {
            var user = await _userRepository.GetUserByEmailAsync(loginDto.Email);

            if (user == null)
                throw new KeyNotFoundException("User not found.");

            if (!user.IsEmailConfirmed)
                throw new UnauthorizedAccessException("Please confirm your email address before logging in.");

            if (!_passwordHasher.VerifyPassword(loginDto.Password, user.Password))
                throw new UnauthorizedAccessException("Invalid password.");

            return await GenerateTokensAsync(user);
        }

        public async Task<TokenDto> RegisterAsync(RegisterDto registerDto)
        {
            var existingUser = await _userRepository.GetUserByEmailAsync(registerDto.Email);
            if (existingUser != null)
                throw new InvalidOperationException("Email is already registered.");

            var hashedPassword = _passwordHasher.HashPassword(registerDto.Password);

            var user = new User
            {
                Name = registerDto.Name,
                Email = registerDto.Email,
                Password = hashedPassword,
                IsEmailConfirmed = false,
                CreatedAt = DateTime.UtcNow
            };

            await _userRepository.AddAsync(user);

            var token = new UserToken
            {
                UserId = user.UserId,
                Token = GenerateRandomToken(),
                TokenType = TokenType.EmailConfirmation,
                ExpiryDate = DateTime.UtcNow.AddHours(24),
                IsUsed = false,
                CreatedAt = DateTime.UtcNow
            };

            await _userTokenRepository.AddAsync(token);
            await _emailService.SendEmailConfirmationAsync(user.Email, token.Token);

            return null; // Email onayı olmadan token dönmüyoruz
        }

        public async Task<bool> ConfirmEmailAsync(string email, string token)
        {
            var user = await _userRepository.GetUserByEmailAsync(email);
            if (user == null)
                return false;

            var validToken = await _userTokenRepository.GetValidTokenAsync(
                user.UserId,
                token,
                TokenType.EmailConfirmation);

            if (validToken == null)
                return false;

            user.IsEmailConfirmed = true;
            validToken.IsUsed = true;

            await _userRepository.UpdateAsync(user);
            await _userTokenRepository.UpdateAsync(validToken);

            return true;
        }

        public async Task<bool> ForgotPasswordAsync(string email)
        {
            var user = await _userRepository.GetUserByEmailAsync(email);
            if (user == null)
                return false;

            await _userTokenRepository.InvalidateTokensAsync(user.UserId, TokenType.PasswordReset);

            var token = new UserToken
            {
                UserId = user.UserId,
                Token = GenerateRandomToken(),
                TokenType = TokenType.PasswordReset,
                ExpiryDate = DateTime.UtcNow.AddHours(1),
                IsUsed = false,
                CreatedAt = DateTime.UtcNow
            };

            await _userTokenRepository.AddAsync(token);
            await _emailService.SendPasswordResetEmailAsync(user.Email, token.Token);

            return true;
        }

        public async Task<bool> ResetPasswordAsync(string email, string token, string newPassword)
        {
            var user = await _userRepository.GetUserByEmailAsync(email);
            if (user == null)
                return false;

            var validToken = await _userTokenRepository.GetValidTokenAsync(
                user.UserId,
                token,
                TokenType.PasswordReset);

            if (validToken == null)
                return false;

            var hashedPassword = _passwordHasher.HashPassword(newPassword);
            user.Password = hashedPassword;
            validToken.IsUsed = true;

            await _userRepository.UpdateAsync(user);
            await _userTokenRepository.UpdateAsync(validToken);

            return true;
        }

        public async Task<bool> ChangePasswordAsync(int userId, string currentPassword, string newPassword)
        {
            var user = await _userRepository.GetByIdAsync(userId);
            if (user == null)
                return false;

            if (!_passwordHasher.VerifyPassword(currentPassword, user.Password))
                return false;

            var hashedPassword = _passwordHasher.HashPassword(newPassword);
            user.Password = hashedPassword;
            await _userRepository.UpdateAsync(user);

            return true;
        }

        private async Task<TokenDto> GenerateTokensAsync(User user)
        {
            var authClaims = new List<Claim>
    {
        new Claim(ClaimTypes.NameIdentifier, user.UserId.ToString()),
        new Claim(ClaimTypes.Email, user.Email),
        new Claim(ClaimTypes.Name, user.Name),
        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
    };

            var authSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_jwtSettings.Secret));

            var token = new JwtSecurityToken(
                issuer: _jwtSettings.ValidIssuer,
                audience: _jwtSettings.ValidAudience,
                expires: DateTime.Now.AddMinutes(_jwtSettings.TokenValidityInMinutes),
                claims: authClaims,
                signingCredentials: new SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)
            );

            // Refresh token oluştur
            var refreshToken = new UserToken
            {
                UserId = user.UserId,
                Token = GenerateRandomToken(),
                TokenType = TokenType.RefreshToken,
                ExpiryDate = DateTime.UtcNow.AddDays(_jwtSettings.RefreshTokenValidityInDays),
                IsUsed = false,
                CreatedAt = DateTime.UtcNow
            };

            await _userTokenRepository.AddAsync(refreshToken);

            return new TokenDto
            {
                AccessToken = new JwtSecurityTokenHandler().WriteToken(token),
                RefreshToken = refreshToken.Token,
                Expiration = token.ValidTo
            };
        }

        private string GenerateRandomToken()
        {
            var randomBytes = new byte[32];
            using var rng = RandomNumberGenerator.Create();
            rng.GetBytes(randomBytes);
            return Convert.ToBase64String(randomBytes);
        }

        public async Task<TokenDto> RefreshTokenAsync(string refreshToken)
        {
            var userToken = await _userTokenRepository.SingleOrDefaultAsync(t =>
                t.Token == refreshToken &&
                t.TokenType == TokenType.RefreshToken);

            if (userToken == null || userToken.IsUsed || userToken.ExpiryDate < DateTime.UtcNow)
                throw new UnauthorizedAccessException("Invalid refresh token.");

            var user = await _userRepository.GetByIdAsync(userToken.UserId);
            if (user == null)
                throw new UnauthorizedAccessException("User not found.");

            // Eski refresh token'ı geçersiz kıl
            userToken.IsUsed = true;
            await _userTokenRepository.UpdateAsync(userToken);

            // Yeni access token ve refresh token üret
            return await GenerateTokensAsync(user);
        }

        public async Task<bool> RevokeRefreshTokenAsync(string refreshToken)
        {
            var userToken = await _userTokenRepository.SingleOrDefaultAsync(t =>
                t.Token == refreshToken &&
                t.TokenType == TokenType.RefreshToken);

            if (userToken == null)
                return false;

            userToken.IsUsed = true;
            await _userTokenRepository.UpdateAsync(userToken);
            return true;
        }
    }
}﻿using EnergyManagementSystem.Core.DTOs;
using EnergyManagementSystem.Core.DTOs.Device;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Interfaces.IService;
using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Services
{
    public class DeviceService : IDeviceService
    {
        private readonly IDeviceRepository _deviceRepository;
        private readonly IHouseRepository _houseRepository;
        private readonly IRoomRepository _roomRepository;

        public DeviceService(
            IDeviceRepository deviceRepository,
            IHouseRepository houseRepository,
            IRoomRepository roomRepository)
        {
            _deviceRepository = deviceRepository ?? throw new ArgumentNullException(nameof(deviceRepository));
            _houseRepository = houseRepository ?? throw new ArgumentNullException(nameof(houseRepository));
            _roomRepository = roomRepository ?? throw new ArgumentNullException(nameof(roomRepository));
        }

        public async Task<DeviceDto> GetByIdAsync(int deviceId)
        {
            var device = await _deviceRepository.GetDeviceWithDetailsAsync(deviceId);
            if (device == null)
                throw new KeyNotFoundException($"Device with ID {deviceId} not found.");

            return MapToDeviceDto(device);
        }

        public async Task<IEnumerable<DeviceDto>> GetHouseDevicesAsync(int houseId)
        {
            var house = await _houseRepository.GetByIdAsync(houseId);
            if (house == null)
                throw new KeyNotFoundException($"House with ID {houseId} not found.");

            var devices = await _deviceRepository.GetDevicesByHouseIdAsync(houseId);
            var deviceDtos = new List<DeviceDto>();

            foreach (var device in devices)
            {
                deviceDtos.Add(MapToDeviceDto(device));
            }

            return deviceDtos;
        }

        public async Task<DeviceDto> CreateAsync(int houseId, CreateDeviceDto createDeviceDto)
        {
            var house = await _houseRepository.GetByIdAsync(houseId);
            if (house == null)
                throw new KeyNotFoundException($"House with ID {houseId} not found.");

            var room = await _roomRepository.GetByIdAsync(createDeviceDto.RoomId);
            if (room == null)
                throw new KeyNotFoundException($"Room with ID {createDeviceDto.RoomId} not found.");

            if (room.HouseId != houseId)
                throw new InvalidOperationException("Room does not belong to the specified house.");

            var device = new Device
            {
                Name = createDeviceDto.Name,
                Type = createDeviceDto.Type,
                HouseId = houseId,
                RoomId = createDeviceDto.RoomId,
                PowerSavingMode = createDeviceDto.PowerSavingMode,
                Status = false // Default to off
            };

            var createdDevice = await _deviceRepository.AddAsync(device);
            return await GetByIdAsync(createdDevice.DeviceId);
        }

        public async Task UpdateAsync(int deviceId, UpdateDeviceDto updateDeviceDto)
        {
            var device = await _deviceRepository.GetByIdAsync(deviceId);
            if (device == null)
                throw new KeyNotFoundException($"Device with ID {deviceId} not found.");

            device.Name = updateDeviceDto.Name;
            device.Type = updateDeviceDto.Type;

            // If PowerSaving mode is enabled, turn off the device
            if (updateDeviceDto.PowerSavingMode)
            {
                device.Status = false;
            }
            else
            {
                device.Status = updateDeviceDto.Status;
            }

            device.PowerSavingMode = updateDeviceDto.PowerSavingMode;
            device.EnergyLimit = updateDeviceDto.EnergyLimit;

            await _deviceRepository.UpdateAsync(device);
        }

        public async Task DeleteAsync(int deviceId)
        {
            var device = await _deviceRepository.GetByIdAsync(deviceId);
            if (device == null)
                throw new KeyNotFoundException($"Device with ID {deviceId} not found.");

            await _deviceRepository.DeleteAsync(device);
        }

        public async Task<IEnumerable<DeviceDto>> GetDevicesByRoomAsync(int roomId)
        {
            var room = await _roomRepository.GetByIdAsync(roomId);
            if (room == null)
                throw new KeyNotFoundException($"Room with ID {roomId} not found.");

            var devices = await _deviceRepository.GetDevicesByRoomIdAsync(roomId);
            var deviceDtos = new List<DeviceDto>();

            foreach (var device in devices)
            {
                deviceDtos.Add(MapToDeviceDto(device));
            }

            return deviceDtos;
        }

        public async Task UpdateDeviceStatusAsync(int deviceId, bool status)
        {
            var device = await _deviceRepository.GetByIdAsync(deviceId);
            if (device == null)
                throw new KeyNotFoundException($"Device with ID {deviceId} not found.");

            device.Status = status;

            if (device.PowerSavingMode)
            {
                device.PowerSavingMode = false;
            }

            await _deviceRepository.UpdateAsync(device);
        }

        private DeviceDto MapToDeviceDto(Device device)
        {
            return new DeviceDto
            {
                DeviceId = device.DeviceId,
                Name = device.Name,
                Type = device.Type,
                Status = device.Status,
                PowerSavingMode = device.PowerSavingMode,
                EnergyLimit = device.EnergyLimit,
                RoomName = device.Room?.Name,
                HouseName = device.House?.Name
            };
        }
    }
}﻿using System.Net;
using System.Net.Mail;
using EnergyManagementSystem.Core.Configuration;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Interfaces.IService;
using Microsoft.Extensions.Options;

namespace EnergyManagementSystem.Service.Services
{
    public class EmailService : IEmailService
    {
        private readonly EmailSettings _emailSettings;

        public EmailService(IOptions<EmailSettings> emailSettings)
        {
            _emailSettings = emailSettings.Value;
        }

        public async Task SendEmailAsync(string to, string subject, string body)
        {
            using var client = new SmtpClient(_emailSettings.Host, _emailSettings.Port)
            {
                EnableSsl = _emailSettings.UseTls,
                Credentials = new NetworkCredential(_emailSettings.Username, _emailSettings.Password)
            };

            var message = new MailMessage
            {
                From = new MailAddress(_emailSettings.Username),
                Subject = subject,
                Body = body,
                IsBodyHtml = true
            };
            message.To.Add(to);

            await client.SendMailAsync(message);
        }

        public async Task SendPasswordResetEmailAsync(string to, string resetToken)
        {
            var subject = "Password Reset Request";
            var body = $@"
                <h2>Password Reset Request</h2>
                <p>To reset your password, click the link below:</p>
                <p><a href='http://localhost:7211/reset-password?token={resetToken}&email={to}'>Reset Password</a></p>
                <p>If you didn't request a password reset, please ignore this email.</p>
                <p>This link will expire in 1 hour.</p>";

            await SendEmailAsync(to, subject, body);
        }
        public async Task SendEmailConfirmationAsync(string to, string confirmationToken)
        {
            var subject = "Confirm Your Email Address";
            var body = $@"
            <h2>Welcome to Energy Management System!</h2>
            <p>Please confirm your email address by clicking the link below:</p>
            <p><a href='http://localhost:7211/confirm-email?token={confirmationToken}&email={to}'>Confirm Email</a></p>
            <p>This link will expire in 24 hours.</p>
            <p>If you didn't create an account, please ignore this email.</p>";

            await SendEmailAsync(to, subject, body);
        }
    }
}﻿using EnergyManagementSystem.Core.DTOs.EnergyUsage;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using AutoMapper;

namespace EnergyManagementSystem.Service.Services
{
    public class EnergyUsageService : IEnergyUsageService
    {
        private readonly IEnergyUsageRepository _energyUsageRepository;
        private readonly IMapper _mapper;

        public EnergyUsageService(IEnergyUsageRepository energyUsageRepository, IMapper mapper)
        {
            _energyUsageRepository = energyUsageRepository;
            _mapper = mapper;
        }

        public async Task<EnergyUsageDto> GetByIdAsync(int id)
        {
            var entity = await _energyUsageRepository.GetByIdAsync(id);
            return _mapper.Map<EnergyUsageDto>(entity);
        }

        public async Task<IEnumerable<EnergyUsageDto>> GetAllAsync()
        {
            var entities = await _energyUsageRepository.GetAllAsync();
            return _mapper.Map<IEnumerable<EnergyUsageDto>>(entities);
        }

        public async Task<EnergyUsageDto> AddAsync(CreateEnergyUsageDto dto)
        {
            var entity = _mapper.Map<EnergyUsage>(dto);
            await _energyUsageRepository.AddAsync(entity);
            return _mapper.Map<EnergyUsageDto>(entity);
        }

        public async Task<bool> RemoveAsync(int id)
        {
            return await _energyUsageRepository.RemoveAsync(id);
        }

        public async Task<bool> UpdateAsync(int id, CreateEnergyUsageDto dto)
        {
            var existingEntity = await _energyUsageRepository.GetByIdAsync(id);
            if (existingEntity == null)
                return false;

            _mapper.Map(dto, existingEntity);
            await _energyUsageRepository.UpdateAsync(existingEntity);
            return true;
        }

        public async Task<EnergyUsageDto> GetCurrentUsageAsync(int deviceId)
        {
            var usages = await _energyUsageRepository.GetUsageByDeviceIdAsync(deviceId, DateTime.Now.AddDays(-1), DateTime.Now);
            var lastUsage = usages.OrderByDescending(u => u.Timestamp).FirstOrDefault();
            return _mapper.Map<EnergyUsageDto>(lastUsage);
        }

        public async Task<IEnumerable<EnergyUsageDto>> GetUsageHistoryAsync(int deviceId, DateTime startDate, DateTime endDate)
        {
            var history = await _energyUsageRepository.GetUsageByDeviceIdAsync(deviceId, startDate, endDate);
            return _mapper.Map<IEnumerable<EnergyUsageDto>>(history);
        }
    }
}﻿using EnergyManagementSystem.Core.DTOs.House;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Services
{
    public class HouseService : IHouseService
    {
        private readonly IHouseRepository _houseRepository;
        private readonly IUserRepository _userRepository;
        private readonly IDeviceRepository _deviceRepository;

        public HouseService(
            IHouseRepository houseRepository,
            IUserRepository userRepository,
            IDeviceRepository deviceRepository)
        {
            _houseRepository = houseRepository ?? throw new ArgumentNullException(nameof(houseRepository));
            _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
            _deviceRepository = deviceRepository ?? throw new ArgumentNullException(nameof(deviceRepository));
        }

        public async Task<HouseDto> GetByIdAsync(int houseId)
        {
            var house = await _houseRepository.GetHouseWithDetailsAsync(houseId);
            if (house == null)
                throw new KeyNotFoundException($"House with ID {houseId} not found.");

            return MapToHouseDto(house);
        }

        public async Task<IEnumerable<HouseDto>> GetUserHousesAsync(int userId)
        {
            var user = await _userRepository.GetByIdAsync(userId);
            if (user == null)
                throw new KeyNotFoundException($"User with ID {userId} not found.");

            var houses = await _houseRepository.GetHousesByUserIdAsync(userId);
            var houseDtos = new List<HouseDto>();

            foreach (var house in houses)
            {
                houseDtos.Add(MapToHouseDto(house));
            }

            return houseDtos;
        }

        public async Task<HouseDto> CreateAsync(int userId, CreateHouseDto createHouseDto)
        {
            var user = await _userRepository.GetByIdAsync(userId);
            if (user == null)
                throw new KeyNotFoundException($"User with ID {userId} not found.");

            var house = new House
            {
                UserId = userId,
                Name = createHouseDto.Name,
                Address = createHouseDto.Address,
                PowerSavingMode = false,
                CreatedAt = DateTime.UtcNow
            };

            var createdHouse = await _houseRepository.AddAsync(house);
            return await GetByIdAsync(createdHouse.HouseId);
        }

        public async Task UpdateAsync(int houseId, UpdateHouseDto updateHouseDto)
        {
            var house = await _houseRepository.GetByIdAsync(houseId);
            if (house == null)
                throw new KeyNotFoundException($"House with ID {houseId} not found.");

            house.Name = updateHouseDto.Name;
            house.Address = updateHouseDto.Address;
            house.PowerSavingMode = updateHouseDto.PowerSavingMode;

            await _houseRepository.UpdateAsync(house);

            // If PowerSavingMode is enabled/disabled, update all devices in the house
            if (house.PowerSavingMode != updateHouseDto.PowerSavingMode)
            {
                var devices = await _deviceRepository.GetDevicesByHouseIdAsync(houseId);
                foreach (var device in devices)
                {
                    device.PowerSavingMode = updateHouseDto.PowerSavingMode;
                    if (updateHouseDto.PowerSavingMode)
                    {
                        device.Status = false; // Turn off devices when power saving is enabled
                    }
                    await _deviceRepository.UpdateAsync(device);
                }
            }
        }

        public async Task DeleteAsync(int houseId)
        {
            var house = await _houseRepository.GetHouseWithDetailsAsync(houseId);
            if (house == null)
                throw new KeyNotFoundException($"House with ID {houseId} not found.");

            // Check if house has any devices
            if (house.Devices?.Any() == true)
            {
                throw new InvalidOperationException("Cannot delete house with associated devices. Please remove all devices first.");
            }

            // Check if house has any rooms
            if (house.Rooms?.Any() == true)
            {
                throw new InvalidOperationException("Cannot delete house with associated rooms. Please remove all rooms first.");
            }

            await _houseRepository.DeleteAsync(house);
        }

        public async Task TogglePowerSavingModeAsync(int houseId, bool enabled)
        {
            var house = await _houseRepository.GetByIdAsync(houseId);
            if (house == null)
                throw new KeyNotFoundException($"House with ID {houseId} not found.");

            house.PowerSavingMode = enabled;
            await _houseRepository.UpdateAsync(house);

            // Update all devices in the house
            var devices = await _deviceRepository.GetDevicesByHouseIdAsync(houseId);
            foreach (var device in devices)
            {
                device.PowerSavingMode = enabled;
                if (enabled)
                {
                    device.Status = false; // Turn off devices when power saving is enabled
                }
                await _deviceRepository.UpdateAsync(device);
            }
        }

        private HouseDto MapToHouseDto(House house)
        {
            return new HouseDto
            {
                HouseId = house.HouseId,
                UserId = house.UserId,
                Name = house.Name,
                Address = house.Address,
                PowerSavingMode = house.PowerSavingMode
            };
        }
    }
}﻿using EnergyManagementSystem.Core.DTOs.Notification;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Services
{
    public class NotificationService : INotificationService
    {
        private readonly INotificationRepository _notificationRepository;
        private readonly IUserRepository _userRepository;

        public NotificationService(
            INotificationRepository notificationRepository,
            IUserRepository userRepository)
        {
            _notificationRepository = notificationRepository ?? throw new ArgumentNullException(nameof(notificationRepository));
            _userRepository = userRepository ?? throw new ArgumentNullException(nameof(userRepository));
        }

        public async Task<NotificationDto> GetByIdAsync(int notificationId)
        {
            var notification = await _notificationRepository.GetByIdAsync(notificationId);
            if (notification == null)
                throw new KeyNotFoundException($"Notification with ID {notificationId} not found.");

            return MapToNotificationDto(notification);
        }

        public async Task<IEnumerable<NotificationDto>> GetUserNotificationsAsync(int userId)
        {
            var user = await _userRepository.GetByIdAsync(userId);
            if (user == null)
                throw new KeyNotFoundException($"User with ID {userId} not found.");

            var notifications = await _notificationRepository.GetUnreadNotificationsAsync(userId);
            var notificationDtos = new List<NotificationDto>();

            foreach (var notification in notifications)
            {
                notificationDtos.Add(MapToNotificationDto(notification));
            }

            return notificationDtos;
        }

        public async Task CreateAsync(CreateNotificationDto createNotificationDto)
        {
            var user = await _userRepository.GetByIdAsync(createNotificationDto.UserId);
            if (user == null)
                throw new KeyNotFoundException($"User with ID {createNotificationDto.UserId} not found.");

            var notification = new Notification
            {
                UserId = createNotificationDto.UserId,
                Message = createNotificationDto.Message,
                Type = createNotificationDto.Type,
                Status = false,
                CreatedAt = DateTime.UtcNow
            };

            await _notificationRepository.AddAsync(notification);
        }

        public async Task MarkAsReadAsync(int notificationId)
        {
            var notification = await _notificationRepository.GetByIdAsync(notificationId);
            if (notification == null)
                throw new KeyNotFoundException($"Notification with ID {notificationId} not found.");

            notification.Status = true; 
            await _notificationRepository.UpdateAsync(notification);
        }

        public async Task DeleteAsync(int notificationId)
        {
            var notification = await _notificationRepository.GetByIdAsync(notificationId);
            if (notification == null)
                throw new KeyNotFoundException($"Notification with ID {notificationId} not found.");

            await _notificationRepository.DeleteAsync(notification);
        }

        public async Task<int> GetUnreadCountAsync(int userId)
        {
            var user = await _userRepository.GetByIdAsync(userId);
            if (user == null)
                throw new KeyNotFoundException($"User with ID {userId} not found.");

            return await _notificationRepository.GetUnreadNotificationCountAsync(userId);
        }

        private NotificationDto MapToNotificationDto(Notification notification)
        {
            return new NotificationDto
            {
                NotificationId = notification.NotificationId,
                UserId = notification.UserId,
                Message = notification.Message,
                Type = notification.Type,
                Status = notification.Status,
                CreatedAt = notification.CreatedAt
            };
        }
    }
}﻿using System.Security.Cryptography;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Interfaces.IService;

public class PasswordHasher : IPasswordHasher
{
    private const int SaltSize = 16; // 128 bit
    private const int KeySize = 32; // 256 bit
    private const int Iterations = 100000;
    private static readonly HashAlgorithmName _hashAlgorithmName = HashAlgorithmName.SHA256;
    private const char Delimiter = ';';

    public string HashPassword(string password)
    {
        var salt = RandomNumberGenerator.GetBytes(SaltSize);
        var hash = Rfc2898DeriveBytes.Pbkdf2(
            password,
            salt,
            Iterations,
            _hashAlgorithmName,
            KeySize
        );

        return string.Join(
            Delimiter,
            Convert.ToBase64String(salt),
            Convert.ToBase64String(hash),
            Iterations,
            _hashAlgorithmName
        );
    }

    public bool VerifyPassword(string password, string hashedPassword)
    {
        var elements = hashedPassword.Split(Delimiter);
        var salt = Convert.FromBase64String(elements[0]);
        var hash = Convert.FromBase64String(elements[1]);
        var iterations = int.Parse(elements[2]);
        var hashAlgorithmName = new HashAlgorithmName(elements[3]);

        var hashToCompare = Rfc2898DeriveBytes.Pbkdf2(
            password,
            salt,
            iterations,
            hashAlgorithmName,
            hash.Length
        );

        return CryptographicOperations.FixedTimeEquals(hash, hashToCompare);
    }
}﻿using EnergyManagementSystem.Core.DTOs.Room;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Services
{
    public class RoomService : IRoomService
    {
        private readonly IRoomRepository _roomRepository;
        private readonly IHouseRepository _houseRepository;

        public RoomService(IRoomRepository roomRepository, IHouseRepository houseRepository)
        {
            _roomRepository = roomRepository ?? throw new ArgumentNullException(nameof(roomRepository));
            _houseRepository = houseRepository ?? throw new ArgumentNullException(nameof(houseRepository));
        }

        public async Task<RoomDto> GetByIdAsync(int roomId)
        {
            var room = await _roomRepository.GetByIdAsync(roomId);
            if (room == null)
                throw new KeyNotFoundException($"Room with ID {roomId} not found.");

            return new RoomDto
            {
                RoomId = room.RoomId,
                HouseId = room.HouseId,
                Name = room.Name
            };
        }

        public async Task<IEnumerable<RoomDto>> GetHouseRoomsAsync(int houseId)
        {
            var house = await _houseRepository.GetByIdAsync(houseId);
            if (house == null)
                throw new KeyNotFoundException($"House with ID {houseId} not found.");

            var rooms = await _roomRepository.GetRoomsByHouseIdAsync(houseId);
            var roomDtos = new List<RoomDto>();

            foreach (var room in rooms)
            {
                roomDtos.Add(new RoomDto
                {
                    RoomId = room.RoomId,
                    HouseId = room.HouseId,
                    Name = room.Name
                });
            }

            return roomDtos;
        }

        public async Task<RoomDto> CreateAsync(CreateRoomDto createRoomDto)
        {
            var house = await _houseRepository.GetByIdAsync(createRoomDto.HouseId);
            if (house == null)
                throw new KeyNotFoundException($"House with ID {createRoomDto.HouseId} not found.");

            var room = new Room
            {
                HouseId = createRoomDto.HouseId,
                Name = createRoomDto.Name
            };

            var createdRoom = await _roomRepository.AddAsync(room);

            return new RoomDto
            {
                RoomId = createdRoom.RoomId,
                HouseId = createdRoom.HouseId,
                Name = createdRoom.Name
            };
        }

        public async Task UpdateAsync(int roomId, UpdateRoomDto updateRoomDto)
        {
            var room = await _roomRepository.GetByIdAsync(roomId);
            if (room == null)
                throw new KeyNotFoundException($"Room with ID {roomId} not found.");

            room.Name = updateRoomDto.Name;

            await _roomRepository.UpdateAsync(room);
        }

        public async Task DeleteAsync(int roomId)
        {
            var room = await _roomRepository.GetByIdAsync(roomId);
            if (room == null)
                throw new KeyNotFoundException($"Room with ID {roomId} not found.");

            var roomWithDevices = await _roomRepository.GetRoomWithDevicesAsync(roomId);
            if (roomWithDevices.Devices?.Any() == true)
                throw new InvalidOperationException("Cannot delete room with associated devices.");

            await _roomRepository.DeleteAsync(room);
        }

        public async Task<RoomDto> GetRoomWithDevicesAsync(int roomId)
        {
            var room = await _roomRepository.GetRoomWithDevicesAsync(roomId);
            if (room == null)
                throw new KeyNotFoundException($"Room with ID {roomId} not found.");

            return new RoomDto
            {
                RoomId = room.RoomId,
                HouseId = room.HouseId,
                Name = room.Name
            };
        }
    }
}﻿using EnergyManagementSystem.Core.DTOs.Schedule;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EnergyManagementSystem.Core.Services
{
    public class ScheduleService : IScheduleService
    {
        private readonly IScheduleRepository _scheduleRepository;
        private readonly IDeviceRepository _deviceRepository;

        public ScheduleService(
            IScheduleRepository scheduleRepository,
            IDeviceRepository deviceRepository)
        {
            _scheduleRepository = scheduleRepository ?? throw new ArgumentNullException(nameof(scheduleRepository));
            _deviceRepository = deviceRepository ?? throw new ArgumentNullException(nameof(deviceRepository));
        }

        public async Task<ScheduleDto> GetByIdAsync(int scheduleId)
        {
            var schedule = await _scheduleRepository.GetByIdAsync(scheduleId);
            if (schedule == null)
                throw new KeyNotFoundException($"Schedule with ID {scheduleId} not found.");

            return MapToScheduleDto(schedule);
        }

        public async Task<IEnumerable<ScheduleDto>> GetDeviceSchedulesAsync(int deviceId)
        {
            var device = await _deviceRepository.GetByIdAsync(deviceId);
            if (device == null)
                throw new KeyNotFoundException($"Device with ID {deviceId} not found.");

            var schedules = await _scheduleRepository.GetSchedulesByDeviceIdAsync(deviceId);
            var scheduleDtos = new List<ScheduleDto>();

            foreach (var schedule in schedules)
            {
                scheduleDtos.Add(MapToScheduleDto(schedule));
            }

            return scheduleDtos;
        }

        public async Task<ScheduleDto> CreateAsync(CreateScheduleDto createScheduleDto)
        {
            var device = await _deviceRepository.GetByIdAsync(createScheduleDto.DeviceId);
            if (device == null)
                throw new KeyNotFoundException($"Device with ID {createScheduleDto.DeviceId} not found.");

            // Zaman kontrolü
            if (createScheduleDto.StartTime >= createScheduleDto.EndTime)
                throw new InvalidOperationException("Start time must be before end time.");

            var schedule = new Schedule
            {
                DeviceId = createScheduleDto.DeviceId,
                StartTime = createScheduleDto.StartTime,
                EndTime = createScheduleDto.EndTime,
                Repeat = createScheduleDto.Repeat
            };

            var createdSchedule = await _scheduleRepository.AddAsync(schedule);
            return MapToScheduleDto(createdSchedule);
        }

        public async Task UpdateAsync(int scheduleId, UpdateScheduleDto updateScheduleDto)
        {
            var schedule = await _scheduleRepository.GetByIdAsync(scheduleId);
            if (schedule == null)
                throw new KeyNotFoundException($"Schedule with ID {scheduleId} not found.");

            // Zaman kontrolü
            if (updateScheduleDto.StartTime >= updateScheduleDto.EndTime)
                throw new InvalidOperationException("Start time must be before end time.");

            schedule.StartTime = updateScheduleDto.StartTime;
            schedule.EndTime = updateScheduleDto.EndTime;
            schedule.Repeat = updateScheduleDto.Repeat;

            await _scheduleRepository.UpdateAsync(schedule);
        }

        public async Task DeleteAsync(int scheduleId)
        {
            var schedule = await _scheduleRepository.GetByIdAsync(scheduleId);
            if (schedule == null)
                throw new KeyNotFoundException($"Schedule with ID {scheduleId} not found.");

            await _scheduleRepository.DeleteAsync(schedule);
        }

        public async Task<IEnumerable<ScheduleDto>> GetActiveSchedulesAsync(int deviceId)
        {
            var device = await _deviceRepository.GetByIdAsync(deviceId);
            if (device == null)
                throw new KeyNotFoundException($"Device with ID {deviceId} not found.");

            var activeSchedules = await _scheduleRepository.GetActiveSchedulesAsync();
            var activeDeviceSchedules = activeSchedules.Where(s => s.DeviceId == deviceId);

            return activeDeviceSchedules.Select(MapToScheduleDto);
        }

        private ScheduleDto MapToScheduleDto(Schedule schedule)
        {
            return new ScheduleDto
            {
                ScheduleId = schedule.ScheduleId,
                DeviceId = schedule.DeviceId,
                StartTime = schedule.StartTime,
                EndTime = schedule.EndTime,
                Repeat = schedule.Repeat
            };
        }
    }
}﻿using EnergyManagementSystem.Core.DTOs.UserSetting;
using EnergyManagementSystem.Core.Interfaces;
using EnergyManagementSystem.Core.Models;
using AutoMapper;

namespace EnergyManagementSystem.Service.Services
{
    public class UserSettingsService : IUserSettingsService
    {
        private readonly IUserSettingRepository _userSettingRepository;
        private readonly IMapper _mapper;

        public UserSettingsService(IUserSettingRepository userSettingRepository, IMapper mapper)
        {
            _userSettingRepository = userSettingRepository;
            _mapper = mapper;
        }

        public async Task<UserSettingDto> GetAllSettingsAsync(int userId)
        {
            var settings = await _userSettingRepository.GetSettingsByUserIdAsync(userId);
            return _mapper.Map<UserSettingDto>(settings.FirstOrDefault());
        }

        public async Task<string> GetPreferenceAsync(int userId, string key)
        {
            var setting = await _userSettingRepository.GetSettingByPreferenceAsync(userId, key);
            return setting?.Value;
        }

        public async Task UpdateSettingAsync(int userId, string key, string value)
        {
            var setting = await _userSettingRepository.GetSettingByPreferenceAsync(userId, key);

            if (setting == null)
            {
                setting = new UserSetting
                {
                    UserId = userId,
                    Preference = key,
                    Value = value
                };
                await _userSettingRepository.AddAsync(setting);
            }
            else
            {
                setting.Value = value;
                await _userSettingRepository.UpdateAsync(setting);
            }
        }

        public async Task UpdateSettingsAsync(int userId, UpdateUserSettingDto settings)
        {
            var userSetting = await _userSettingRepository.GetSettingByPreferenceAsync(userId, settings.Preference);

            if (userSetting == null)
            {
                userSetting = _mapper.Map<UserSetting>(settings);
                userSetting.UserId = userId;
                await _userSettingRepository.AddAsync(userSetting);
            }
            else
            {
                _mapper.Map(settings, userSetting);
                await _userSettingRepository.UpdateAsync(userSetting);
            }
        }
    }
}